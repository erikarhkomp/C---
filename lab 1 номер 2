#include <iostream>
#include <cmath>

double f(double x) {
    return exp(-x) - sqrt(x - 1);
}

double f_prime(double x) {
    return -exp(-x) - 1/(2*sqrt(x - 1));
}

double bisection(double a, double b, double epsilon) {
    double c;
    while ((b - a) >= epsilon) {
        c = (a + b) / 2;
        if (f(c) == 0.0)
            break;
        else if (f(c) * f(a) < 0)
            b = c;
        else
            a = c;
    }
    return c;
}

double regula_falsi(double a, double b, double epsilon) {
    double c;
    while (fabs(b - a) >= epsilon) {
        c = (a*f(b) - b*f(a)) / (f(b) - f(a));
        if (f(c) == 0.0)
            break;
        else if (f(c) * f(a) < 0)
            b = c;
        else
            a = c;
    }
    return c;
}

double newton(double x0, double epsilon) {
    double x = x0;
    while (fabs(f(x)) >= epsilon) {
        x = x - f(x) / f_prime(x);
    }
    return x;
}

int main() {
    double epsilon = 1e-6;

    // Метод дихотомии
    double root_bisection = bisection(1, 3, epsilon);
    std::cout << "Корень методом дихотомии: " << root_bisection << std::endl;

    // Метод хорд
    double root_regula_falsi = regula_falsi(1, 3, epsilon);
    std::cout << "Корень методом хорд: " << root_regula_falsi << std::endl;

    // Метод Ньютона
    double root_newton = newton(2, epsilon);
    std::cout << "Корень методом Ньютона: " << root_newton << std::endl;

    return 0;
}
